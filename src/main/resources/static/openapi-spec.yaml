openapi: 3.0.3
info:
  title: Swagger Ecommerce Store API - OpenAPI 3.0
  contact:
    email: ismailrzouki7@gmail.com
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.11
servers:
  - url: https://localhost:8080/api/v1
tags:
  - name: Authentication
    description: Operations about User Authentication
  - name: User Management
    description: Operations on User

security:
   - bearerAuth: []
   
paths:
  /user/login:
    post:
      tags:
        - Authentication
      operationId: loginUser
      summary: User Authentication
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cred'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
            application/xml:
              schema:
                $ref: '#/components/schemas/Token'
        '500':
          description: Invalid Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
    
  /user/getAll:
    get:
      security:
        - bearerAuth: []
      tags: 
        - User Management
      operationId: getAllUsers
      summary: get All Registered Users
      responses:
        '200':
          description: User List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDtoList'
            application/xml:
              schema:
                $ref: '#/components/schemas/UserDtoList'
        '500':
          description: Failed to Fetch User List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
                
  /user/add:
    post:
      security:
        - bearerAuth: []
      tags:
        - Authentication
      operationId: addUser
      summary: User Registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: User Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Failed to Add New User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'

  /user/edit:
    put:
      security:
        - bearerAuth: []
      tags:
        - User Management
      operationId: editUser
      summary: User Registration
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserDto'
        required: true
      responses:
        '200':
          description: User Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Failed to Add New User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
          
  /user/delete/{userId}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - User Management
      operationId: deleteUser
      summary: Delete specific user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to delete
      responses:
        '200':
          description: User Successfully Added
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Failed to Add New User
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
   
  /user/logout/{userId}:
    put:
      security:
        - bearerAuth: []
      tags:
        - User Management
      operationId: logout
      summary: Logout the current user
      parameters:
        - in: path
          name: userId
          schema:
            type: integer
          required: true
          description: Numeric ID of the user to logout
      responses:
        '200':
          description: User Successfully Logged out
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'
        '500':
          description: Failed to Logout the current user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Response'
            application/xml:
              schema:
                $ref: '#/components/schemas/Response'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Cred:
      type: object
      properties:
        email:
          type: string
          example: "ismaa@domain.com"
        password:
          type: string
          example: "plainText"
    Token:
      type: object
      properties:
        token:
          type: string
          example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0IiwiYXVkIjpbImFkbWluIl0sImlzcyI6Im1hc29uLm1ldGFtdWcubmV0IiwiZXhwIjoxNTc0NTEyNzY1LCJpYXQiOjE1NjY3MzY3NjUsImp0aSI6ImY3YmZlMzNmLTdiZjctNGViNC04ZTU5LTk5MTc5OWI1ZWI4YSJ9.EVcCaSqrSNVs3cWdLt-qkoqUk7rPHEOsDHS8yejwxMw"
        expiration:
          type: integer
          format: int64
          example: 1235216897543
        roles:
          type: string
          example: "ADMIN;SUPERVISOR;STAFF"
        firstname:
           type: string
           example: ismail
        lastname:
           type: string
           example: rzouki
        username: 
           type: string
           example: ir91995
        gender:
           type: string
           minLength: 1
           maxLength: 1
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 111
        firstName:
           type: string
           example: ismail
        lastName:
           type: string
           example: rzouki
        userName:
           type: string
           example: IR91995
        email:
          type: string
          example: ismaa@domain.com
        isActive:
          type: boolean
          example: true
        isLogged:
          type: boolean
          example: true
        created:
          type: string
          format: date-time
          example: null
        updated:
          type: string
          format: date-time
          example: null
        roles:
          type: string
          example: ADMIN|STAFF
          
    UserDtoList:
      type: array
      items:
        $ref: '#/components/schemas/UserDto'
        
    UserDto:
      type: object
      properties:
        id:
          type: integer
          example: 111
        firstName:
           type: string
           example: ismail
        lastName:
           type: string
           example: rzouki
        userName:
           type: string
           example: IR91995
        email:
          type: string
          example: "ismaa@rimberry.ma"
        password:
          type: string
          example: password
        token:
           type: string
           example: "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiIxMjM0IiwiYXVkIj..."
        isActive: 
          type: boolean
          example: true
        isDeleted:
          type: boolean
          example: false
        avatar:
          type: string
          example: "https://io.idev/imgs/avatar12.png"
        gender:
          type: string
          minLength: 1
          maxLength: 1
          example: F
        isLogged:
          type: boolean
          example: false
        created:
          type: string
          format: date-time
          example: null
        updated:
          type: string
          format: date-time
          example: null
        roles:
          type: string
          example: ADMIN|STAFF
    
    Page:
      type: object
      properties:
        currentPage:
          type: integer
          example: 1
        totalPages:
          type: integer
          example: 10
        totalElements:
          type: integer
          example: 100
        content: 
          type: array
          items: 
            $ref: '#/components/schemas/UserDto'
        hasNext:
          type: boolean
          example: 2
    
    Response:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Exception Details from the API
        details:
          type: string
          example: "Exception in thread 'main' java.lang.NullPointerException: Oops!"